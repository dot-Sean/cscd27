Q4.
Partners {Man Xu, Eric Ren}
We used the open-source tool Pyecm to factorize the number.

The output of the program is following:
python pyecm.py -v 127364267597139493540723331204339211194586014817451203830799795925196194691202462897905850883866904868892415046580817569176239367692303288839770474652109700848358432405752683726342528889678012214522325274056903064820951043366005591893083764579470069805619180603771671383915933692672583275832310594117217293261
Factoring 127364267597139493540723331204339211194586014817451203830799795925196194691202462897905850883866904868892415046580817569176239367692303288839770474652109700848358432405752683726342528889678012214522325274056903064820951043366005591893083764579470069805619180603771671383915933692672583275832310594117217293261:
Searching for primes around 15 digits
Searching for primes around 20 digits
Searching for primes around 25 digits
Found factor: 8194124624414046878093826113
Mainloop call was: 127364267597139493540723331204339211194586014817451203830799795925196194691202462897905850883866904868892415046580817569176239367692303288839770474652109700848358432405752683726342528889678012214522325274056903064820951043366005591893083764579470069805619180603771671383915933692672583275832310594117217293261 65026 [2604, 2605, 2606, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619, 2620, 2621, 2622, 2623, 2624, 2625, 2626, 2627, 2628, 2629, 2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 2638, 2639, 2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649, 2650, 2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660, 2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670, 2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683, 2684, 2685, 2686, 2687, 2688, 2689, 2690, 2691, 2692, 2693, 2694, 2695, 2696, 2697, 2698, 2699, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739, 2740, 2741, 2742, 2743, 2744, 2745, 2746, 2747, 2748, 2749, 2750, 2751, 2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 2815, 2816, 2817, 2818, 2819, 2820, 2821, 2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840, 2841, 2842, 2843, 2844, 2845, 2846, 2847, 2848, 2849, 2850, 2851, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870, 2871, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2880, 2881, 2882, 2883, 2884, 2885, 2886, 2887, 2888, 2889, 2890, 2891, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2899, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910, 2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920, 2921, 2922, 2923, 2924, 2925, 2926, 2927, 2928, 2929, 2930, 2931, 2932, 2933, 2934, 2935, 2936, 2937, 2938, 2939, 2940, 2941, 2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949, 2950, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 2981, 2982, 2983, 2984, 2985, 2986, 2987, 2988, 2989, 2990, 2991, 2992, 2993, 2994, 2995, 2996, 2997, 2998, 2999, 3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247]
p=8194124624414046878093826113
q=15543364719846102734035905265021007874527909072857707530407929290687101099950235380124854710034333308285660202980757696503925683873746491877865507719899027251207102262278680571817169261263452242836721127096300509656928177929591710741117876178047883330343700515792044255540432173197
(factor processed)

The captured secret on wireshark is following:

POST /cscd27f14/ViewSecret HTTP/1.1
Content-Type: application/x-www-form-urlencoded
charset: utf-8
Cache-Control: no-cache
Pragma: no-cache
User-Agent: Java/1.6.0_32
Host: mathlab.utsc.utoronto.ca:41414
Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2
Connection: keep-alive
Content-Length: 42

username=cscd27f14&password=dcf35c470d090eHTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Set-Cookie: JSESSIONID=535C5B7B3ABC8A914A26A80453ED7F2E; Path=/cscd27f14; Secure
Content-Type: text/html
Content-Length: 1034
Date: Fri, 07 Nov 2014 19:11:01 GMT

<html>
<head>
<title>Secrets of Happiness</title>
</head>
<body>
<h1>Secrets of Happiness</h1>
<ul>
<li>'It is not easy to find happiness in ourselves, and it is not possible to find it elsewhere.'</li>
<li>'All happiness depends on a leisurely breakfast.'</li>
<li>'If you want happiness for an hour, take a nap.<br/> If you want happiness for a day, go fishing.<br/> If you want happiness for a year, inherit a fortune.<br/> If you want happiness for a lifetime, help someone else.'</li>
<li>'When one door of happiness closes, another opens, but often we look so long at the closed door that we do not see the one that has been opened for us.'</li>
<li>'Happiness is when what you think, what you say, and what you do are in harmony.'</li>
<li>'To be without some of the things you want is an indispensable part of happiness'</li>
<li>'Optimism is a happiness magnet. If you stay positive, good things and good people will be drawn to you.'</li>
<li>'Ice cream is happiness condensed.'</li>
</ul>
</body>
</html>

The Pyecm program uses the Lenstra's elliptic curve factorization algorithm, the explanation is as follows(from wikipedia):

1. Pick a random elliptic curve over Z/nZ, with equation of the form y^2 = x^3 + ax + b (mod n) together with a non-trivial point P(x0,y0) on it. This is done by picking random x_0,y_0,a \in Z/nZ, then calculating b=y_0^2 -x_0^3 -ax_0.

1. Pick a random elliptic curve over Z/nZ, with equation of the form y^2 = x^3 + ax + b(modn) together with a non-trivial point P(x_0,y_0) on it.
This is done by first picking random x_0,y_0,a\in\mathbf{Z}/n\mathbf{Z}, and then calculating b = y_0^2 - x_0^3 - ax_0(mod n).
2. 'Addition' of P and Q as points in general defines a group operation P ⊕ Q on the curve whose product can be computed from formulas given in the article on elliptic curves.
Using this assumption, we can form repeated multiples of a point P: kP = P ⊕ ... ⊕ P (k times). The addition formulas involve the taking the modular slope of a chord joining P and Q, and thus division between residue classes modulo n, performed using the extended Euclidean algorithm. In particular, division by some v (mod n) includes calculation of the greatest common divisor gcd(v, n).
If the slope is of the form u/v with gcd(u, n) = 1, then v = 0 (mod n) means that the result of the ⊕-addition will be \infty, the point 'at infinity' corresponding to the intersection of the 'vertical' line joining P (x, y), P' (x, −y) and the curve. However, if gcd(v, n) is neither 1 nor n, then the ⊕-addition will not produce a meaningful point on the curve, which shows that our elliptic curve is not a group (mod n), but, more importantly for now, gcd(v, n) is a non-trivial factor of n.
3. Compute eP on the elliptic curve (mod n), where e is product of many small numbers: say, a product of small primes raised to small powers, as in the p − 1 algorithm, or the factorial B! for some not too large B. This can be done efficiently, one small factor at a time. Say, to get B!P, first compute 2P, then 3(2P), then 4(3!P), and so on. Of course, B should be small enough so that B-wise ⊕-addition can be performed in reasonable time.
4. If we were able to finish all the calculations above without encountering non-invertible elements (mod n), then we need to try again with some other curve and starting point.
If at some stage we found kP = ∞ (infinity on the elliptic curve), we should start over with a new curve and starting point, since this point \infty is the group identity element, so is unchanged under any further addition operations.
If we encountered a gcd(v, n) at some stage that was neither 1 nor n, then we are done: it is a non-trivial factor of n.
